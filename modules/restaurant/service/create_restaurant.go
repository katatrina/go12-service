package restaurantservice

import (
	"context"
	"time"
	
	"github.com/google/uuid"
	"github.com/katatrina/go12-service/modules/restaurant/model"
	"github.com/katatrina/go12-service/shared/datatype"
)

type CreateCommand struct {
	DTO *restaurantmodel.CreateRestaurantDTO
}

type CreateCommandHandler struct {
	restRepo ICreateRepo
}

type ICreateRepo interface {
	Insert(ctx context.Context, data *restaurantmodel.Restaurant) error
}

func NewCreateCommandHandler(restRepo ICreateRepo) *CreateCommandHandler {
	return &CreateCommandHandler{restRepo: restRepo}
}

func (hdl *CreateCommandHandler) Execute(ctx context.Context, cmd *CreateCommand) (*restaurantmodel.Restaurant, error) {
	if err := cmd.DTO.Validate(); err != nil {
		return nil, datatype.ErrBadRequest.WithError(err.Error())
	}
	
	restaurantID, err := uuid.NewV7()
	if err != nil {
		return nil, datatype.ErrInternalServerError.WithWrap(err).WithDebug(err.Error())
	}
	
	restaurant := restaurantmodel.Restaurant{
		ID:         restaurantID,       // Must be generated by the service
		OwnerID:    cmd.DTO.OwnerID,    // Required
		CategoryID: cmd.DTO.CategoryID, // Optional
		Name:       cmd.DTO.Name,       // Required
		Addr:       cmd.DTO.Addr,       // Required
		CityID:     cmd.DTO.CityID,     // Optional
		// Lat:              nil, // Cannot provide when creating, should be updated later
		// Lng:              nil, // Cannot provide when creating, should be updated later
		// Cover:            nil, // Cannot provide when creating, should be updated later
		// Logo:             nil, // Cannot provide when creating, should be updated later
		// ShippingFeePerKm: 0, // Cannot provide when creating, should be updated later
		Status:    datatype.StatusActive, // Mandatory for every new restaurant
		CreatedAt: time.Now().UTC(),      // Mandatory for every new restaurant
		UpdatedAt: time.Now().UTC(),      // Mandatory for every new restaurant
	}
	
	if err = hdl.restRepo.Insert(ctx, &restaurant); err != nil {
		return nil, datatype.ErrInternalServerError.WithWrap(err).WithDebug(err.Error())
	}
	
	return &restaurant, nil
}
