// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/restaurant/restaurant.proto

package restaurant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Restaurant_GetRestaurantsByIDs_FullMethodName        = "/protorpc.Restaurant/GetRestaurantsByIDs"
	Restaurant_GetRestaurantsByCategoryID_FullMethodName = "/protorpc.Restaurant/GetRestaurantsByCategoryID"
)

// RestaurantClient is the client API for Restaurant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestaurantClient interface {
	GetRestaurantsByIDs(ctx context.Context, in *GetRestaurantIDsRequest, opts ...grpc.CallOption) (*RestaurantIDsResp, error)
	GetRestaurantsByCategoryID(ctx context.Context, in *GetRestaurantsByCategoryRequest, opts ...grpc.CallOption) (*RestaurantIDsResp, error)
}

type restaurantClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantClient(cc grpc.ClientConnInterface) RestaurantClient {
	return &restaurantClient{cc}
}

func (c *restaurantClient) GetRestaurantsByIDs(ctx context.Context, in *GetRestaurantIDsRequest, opts ...grpc.CallOption) (*RestaurantIDsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantIDsResp)
	err := c.cc.Invoke(ctx, Restaurant_GetRestaurantsByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantClient) GetRestaurantsByCategoryID(ctx context.Context, in *GetRestaurantsByCategoryRequest, opts ...grpc.CallOption) (*RestaurantIDsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantIDsResp)
	err := c.cc.Invoke(ctx, Restaurant_GetRestaurantsByCategoryID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantServer is the server API for Restaurant service.
// All implementations must embed UnimplementedRestaurantServer
// for forward compatibility.
type RestaurantServer interface {
	GetRestaurantsByIDs(context.Context, *GetRestaurantIDsRequest) (*RestaurantIDsResp, error)
	GetRestaurantsByCategoryID(context.Context, *GetRestaurantsByCategoryRequest) (*RestaurantIDsResp, error)
	mustEmbedUnimplementedRestaurantServer()
}

// UnimplementedRestaurantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRestaurantServer struct{}

func (UnimplementedRestaurantServer) GetRestaurantsByIDs(context.Context, *GetRestaurantIDsRequest) (*RestaurantIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantsByIDs not implemented")
}
func (UnimplementedRestaurantServer) GetRestaurantsByCategoryID(context.Context, *GetRestaurantsByCategoryRequest) (*RestaurantIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantsByCategoryID not implemented")
}
func (UnimplementedRestaurantServer) mustEmbedUnimplementedRestaurantServer() {}
func (UnimplementedRestaurantServer) testEmbeddedByValue()                    {}

// UnsafeRestaurantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantServer will
// result in compilation errors.
type UnsafeRestaurantServer interface {
	mustEmbedUnimplementedRestaurantServer()
}

func RegisterRestaurantServer(s grpc.ServiceRegistrar, srv RestaurantServer) {
	// If the following call pancis, it indicates UnimplementedRestaurantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Restaurant_ServiceDesc, srv)
}

func _Restaurant_GetRestaurantsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).GetRestaurantsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Restaurant_GetRestaurantsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).GetRestaurantsByIDs(ctx, req.(*GetRestaurantIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restaurant_GetRestaurantsByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).GetRestaurantsByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Restaurant_GetRestaurantsByCategoryID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).GetRestaurantsByCategoryID(ctx, req.(*GetRestaurantsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Restaurant_ServiceDesc is the grpc.ServiceDesc for Restaurant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Restaurant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protorpc.Restaurant",
	HandlerType: (*RestaurantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRestaurantsByIDs",
			Handler:    _Restaurant_GetRestaurantsByIDs_Handler,
		},
		{
			MethodName: "GetRestaurantsByCategoryID",
			Handler:    _Restaurant_GetRestaurantsByCategoryID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/restaurant/restaurant.proto",
}
